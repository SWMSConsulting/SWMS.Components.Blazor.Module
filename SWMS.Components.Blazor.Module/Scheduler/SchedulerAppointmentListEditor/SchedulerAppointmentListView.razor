@using DevExpress.Blazor
@using DevExpress.Persistent.Base.General
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using System.Collections.ObjectModel
@using Microsoft.JSInterop
@using System.Drawing

@inject IJSRuntime JS

@if (DataStorage != null)
{
    <div style="display:flex; flex-direction:row;gap:5px;">

        <DxGrid Data="@Resources" AutoExpandAllGroupRows="true"
                SelectedDataItemsChanged="OnVisibleResourcesDataSourceChanged"
            SelectedDataItems="@VisibleResources"
            SelectionMode="GridSelectionMode.Multiple"
            AllowColumnReorder="false"
        >
            <Columns>
                <DxGridSelectionColumn Width="35px"/>
                <DxGridDataColumn FieldName="Caption" Caption="Name" />
                <DxGridDataColumn FieldName="ResourceCategoryName" Caption="Category" GroupIndex="0" />
            </Columns>

        </DxGrid>

        <DxGrid @ref="FirstGrid"
                CssClass="first-grid"
                AutoExpandAllGroupRows="true"
                AllowColumnReorder="false"
                Data=@GetPlannableActivitiesForCategories(VisibleResourceCategories)
                CustomizeElement="Grid_CustomizeElement">
            <Columns>
                <DxGridDataColumn FieldName="SupportedResourceCategory" Caption=" " Width="40px" />
                <DxGridDataColumn FieldName="Summary" Caption="Activity" />
            </Columns>
            <DataColumnCellDisplayTemplate>
                @{
                    if (context.DataColumn.FieldName == "SupportedResourceCategory")
                    {
                        <div style="margin-left:10px; width: 20px; height:20px; border-radius: 50%; background-color: @GetHexColor(context.Value as SchedulerResourceCategory); border: solid 1px black"></div>
                    } else
                    {
                        <div>@context.Value</div>
                    }
                }
            </DataColumnCellDisplayTemplate>

        </DxGrid>

        <DxScheduler @ref="Scheduler"
                    CssClass="second-grid"
                    @bind-StartDate="@StartDate"
                    DataStorage="@DataStorage"
                    GroupType="SchedulerGroupType.Resource"
                    VisibleResourcesDataSource="@VisibleResources"
                    AppointmentFormShowing="OnAppointmentFormShowing"
                    ShowAppointmentTooltip="true"
                    AppointmentFormMode="SchedulerAppointmentFormMode.EditForm"
                    ValidateEditForm="true"
                    AllowCreateAppointment="false"
                    AllowDeleteAppointment="false"
                    AllowDragAppointmentBetweenResources="false"
                    ResourceNavigatorVisible="false"
        >
            <Views>

                <DxSchedulerTimelineView  Duration="@TimeSpan.FromHours(24)" CellMinWidth="70">
                    <Scales>
                        <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Day" UnitCount="1"></DxSchedulerTimeScale>
                        <DxSchedulerTimeScale Unit="@SchedulerTimeScaleUnit.Hour" UnitCount="2"></DxSchedulerTimeScale>
                    </Scales>
                    <TimeCellTemplate>
                
                        @if (context.Interval.Start.Hour < 6 || context.Interval.Start.Hour > 18)
                        {
                            <div style="height: 100%; background-color:lightgray">

                            </div>
                        } 
                    </TimeCellTemplate>


                </DxSchedulerTimelineView>

            </Views>

            <AppointmentFormLayout Context="formInfo">

                <div style="display: flex; flex-direction: row">
                    <DxSchedulerStartDateFormLayoutItem/>
                    <DxSchedulerStartTimeFormLayoutItem/>
                </div>

                <div style="display: flex; flex-direction: row">
                    <DxSchedulerEndDateFormLayoutItem/>
                    <DxSchedulerEndTimeFormLayoutItem/>
                </div>

            
                <DxSchedulerCustomFormLayoutItem Caption="Activity">
                    <Template>
                        <DxComboBox Data=@PlannableActivities @bind-Value="@(((CustomAppointmentFormInfo)formInfo).Activity)" />
                    </Template>
                </DxSchedulerCustomFormLayoutItem>

                <DxSchedulerResourceFormLayoutItem/>

            </AppointmentFormLayout>

        </DxScheduler>

    </div>
}

@if (PlannableActivities != null)
{
    <div style="height:20px"></div>

    
}

@code {
    [Parameter]
    public ObservableCollection<SchedulerAppointment> Appointments { get; set; }

    [Parameter]
    public ObservableCollection<SchedulerResource> Resources { get; set; }

    [Parameter]
    public ObservableCollection<SchedulerActivity> PlannableActivities { get; set; }

    [Parameter]
    public EventCallback<DragToPlanActivityEventArgs> DragToPlanActivity { get; set; }

    public SchedulerActivity? SelectedActivity { get; set; }

    bool ReInitializeDragging { get; set; }
    IGrid FirstGrid { get; set; }
    DxScheduler Scheduler { get; set; }

    DotNetObjectReference<SchedulerAppointmentListView> DotNetHelper { get; set; }
    IJSObjectReference JsModule { get; set; }

    DxSchedulerDataStorage DataStorage { get; set; }

    DateTime StartDate { get; set; } = DateTime.Today;

    private ObservableCollection<SchedulerResource> VisibleResources { get; set; }
    private ObservableCollection<SchedulerResourceCategory> VisibleResourceCategories { get; set; }

    static SchedulerActivity Activity(DxExpandoDictionaryObject customFields) => (SchedulerActivity)customFields["Activity"];

    protected override Task OnParametersSetAsync()
    {
        if (Appointments != null && Resources != null)
        {
            DataStorage = new DxSchedulerDataStorage()
            {
                AppointmentsSource = Appointments,
                AppointmentMappings = new DxSchedulerAppointmentMappings()
                {
                    //Type = "Type",
                    Start = "StartOn",
                    End = "EndOn",
                    Subject = "Subject",
                    //AllDay = "AllDay",
                    Location = "Location",
                    //Description = "Description",
                    //LabelId = "Label",
                    //StatusId = "Status",
                    //RecurrenceInfo = "RecurrenceInfoXml",
                    //ResourceId = "ResourceIdBlazor",
                    CustomFieldMappings = new List<DxSchedulerCustomFieldMapping> {
                        new DxSchedulerCustomFieldMapping { Name = "Activity", Mapping = "SchedulerActivity" }
                    }
                },
                ResourcesSource = Resources,
                ResourceMappings = new DxSchedulerResourceMappings()
                {
                    Id = "IdMapping",
                    Caption = "ResourceName",
                    Color = "Color",
                        TextCssClass = "TextCssClass"
                } 
            };

            if (VisibleResources == null)
            {
                VisibleResources = Resources; //new ObservableCollection<SchedulerResource>();
                VisibleResourceCategories = new ObservableCollection<SchedulerResourceCategory>(
                    VisibleResources.Select(r => r.SchedulerResourceCategory).Distinct()
                );
            }
        }



        return base.OnParametersSetAsync();
    }

    private string GetHexColor(SchedulerResourceCategory? category)
    {
        return GetHexColor(category?.Color);
    }
    private string GetHexColor(Color? color)
    {
        var c = color ?? Color.White;
        return $"#{c.R:X2}{c.G:X2}{c.B:X2}";
    }

    private void OnVisibleResourcesDataSourceChanged(IReadOnlyList<object> resources)
    {
        VisibleResources = new ObservableCollection<SchedulerResource>(resources.Cast<SchedulerResource>().ToList());
        ReInitializeDragging = true;

        VisibleResourceCategories = new ObservableCollection<SchedulerResourceCategory>(
            VisibleResources.Select(r => r.SchedulerResourceCategory).Distinct()
        );
    }

    private IList<SchedulerActivity> GetPlannableActivitiesForCategories(IList<SchedulerResourceCategory> categories)
    {
        if (PlannableActivities == null || categories == null || categories.Count < 1)
        {
            return new List<SchedulerActivity>();
        }

        return PlannableActivities.Where(a => categories.Contains(a.SupportedResourceCategory)).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsPath = "./js/SchedulerAppointmentListView.js";
            JsModule = await JS.InvokeAsync<IJSObjectReference>("import", jsPath);

            DotNetHelper = DotNetObjectReference.Create(this);
            await JsModule.InvokeVoidAsync("setDotNetHelper", DotNetHelper);
            await JsModule.InvokeVoidAsync("initialize", GetGridSelector(FirstGrid), GetGridSelector(Scheduler));
        }
        else
        {
            if (ReInitializeDragging)
            {
                ReInitializeDragging = false;
                await JsModule.InvokeVoidAsync("initialize", GetGridSelector(FirstGrid), GetGridSelector(Scheduler));
            }
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
            e.Attributes["data-visible-index"] = e.VisibleIndex;
    }

    [JSInvokable]
    public async void MoveGridRow(int draggableRowIndex, int droppableRowIndex)
    {
        var selectedResource = VisibleResources.ElementAt(droppableRowIndex);
        var plannableActivity = PlannableActivities.ElementAt(draggableRowIndex);

        await DragToPlanActivity.InvokeAsync(new DragToPlanActivityEventArgs(
            selectedResource, plannableActivity, DateTime.Today.AddHours(8)
        ));
    }

    static string GetGridSelector(IGrid grid)
    {
        return string.Join(
            string.Empty,
            grid.CssClass
                .Split(" ")
                .Where(i => !string.IsNullOrWhiteSpace(i))
                .Select(i => "." + i.Trim())
        );
    }
    static string GetGridSelector(DxScheduler grid)
    {
        return string.Join(
            string.Empty,
            grid.CssClass
                .Split(" ")
                .Where(i => !string.IsNullOrWhiteSpace(i))
                .Select(i => "." + i.Trim())
        );
    }
    public record GridDataItem(string Name);

    private class CustomAppointmentFormInfo : SchedulerAppointmentFormInfo
    {
        public CustomAppointmentFormInfo(
            DxSchedulerAppointmentItem appointmentItem,
            DxSchedulerDataStorage dataStorage, 
            DxScheduler scheduler
        ) : base(appointmentItem, dataStorage, scheduler) { }

        [Required]
        public SchedulerActivity Activity
        {
            get { return (SchedulerActivity)CustomFields["Activity"]; }
            set { CustomFields["Activity"] = value; }
        }
    }

    void OnAppointmentFormShowing(SchedulerAppointmentFormEventArgs args)
    {
        args.FormInfo = new CustomAppointmentFormInfo(args.Appointment, DataStorage, Scheduler);
    }
}